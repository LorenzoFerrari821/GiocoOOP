class GUIPartitaRicerca
!!!149506.java!!!	GUIPartitaRicerca(inout partita : Partita, inout guiPartita : GUIPartita, inout valoriDiGioco : ValoriDiGioco, in proprietario : String)
		ImageIcon icona = new ImageIcon("media/Icona.png");                  //Carichiamo l'icona personalizzata
		Image scaledicona = icona.getImage().getScaledInstance(80, 60, Image.SCALE_SMOOTH);
		setIconImage(scaledicona);  

		Toolkit t1 = Toolkit.getDefaultToolkit();                                 //Cursore personalizzato
		Image img = t1.getImage("media/cursore.png");
		Point point = new Point(0,0);
		Cursor cursor = t1.createCustomCursor(img, point, "Cursore Personalizzato");
		setCursor(cursor); 
		
		try {
		    //Creo un font custom
		    fontFuturist = Font.createFont(Font.TRUETYPE_FONT, new File("media\\font_futurist_fixed.ttf")).deriveFont(12f);
		    GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
		    //registro il font
		    ge.registerFont(Font.createFont(Font.TRUETYPE_FONT, new File("media\\font_futurist_fixed.ttf")));
		} catch (IOException e) {
		    e.printStackTrace();
		} catch(FontFormatException e) {
		    e.printStackTrace();
		}
		
		try {
			UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
		} catch (ClassNotFoundException | InstantiationException | UnsupportedLookAndFeelException e1) {
			// TODO Auto-generated catch block
			e1.printStackTrace();
		} catch (IllegalAccessException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		
		setTitle(Global.getLabels("s121"));
		setBounds(0, 0, 1000, 550);
		setMinimumSize(new Dimension(650, 450));   
		setLocationRelativeTo(null);
		setLayout(new BorderLayout(0, 0));
		contentPane = new JPanel(new GridBagLayout());
		pnlFooter = new JPanel(new BorderLayout(0,0));
		setModal(true);
		
		this.valoriDiGioco = valoriDiGioco;
		this.partita = partita;
		this.guiPartita = guiPartita;
		this.proprietario = proprietario;
		
		iconeGrafiche = new IconeGrafiche();
		
		creaGUI();
		btnIndietro = new RoundedCornerButton();
		btnIndietro.setFont(fontFuturist.deriveFont(13f));
		btnIndietro.setText(Global.getLabels("a0"));
		btnIndietro.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				try {
					audio = AudioSystem.getClip();
					audio.open(AudioSystem.getAudioInputStream(new File("media/suonoindietro.wav")));
				} catch (LineUnavailableException | IOException | UnsupportedAudioFileException e1) {
					e1.printStackTrace();
				}
				FloatControl gainControl = (FloatControl) audio.getControl(FloatControl.Type.MASTER_GAIN);
				gainControl.setValue(Global.getLivVolume()); 
				audio.start();
				dispose();
			}
		});
		pnlFooter.add(btnIndietro, BorderLayout.EAST);
		
		add(new JScrollPane(contentPane, JScrollPane.VERTICAL_SCROLLBAR_AS_NEEDED, JScrollPane.HORIZONTAL_SCROLLBAR_AS_NEEDED), BorderLayout.CENTER);
		add(pnlFooter, BorderLayout.SOUTH);
!!!149634.java!!!	creaGUI() : void
		int valX = 1; //dichiarato qui perchè serve solo per il corretto posizionamento orizzontale grafico delle ricerche
		
		//Setting icone tick e cross
		lblTick = new JLabel();
		lblTick.setIcon(iconeGrafiche.newiconTick);
		lblTick.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		lblCross = new JLabel();
		lblCross.setIcon(iconeGrafiche.newiconCross);
		lblCross.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		c = new GridBagConstraints();
		c.anchor = new GridBagConstraints().CENTER;
		c.fill = GridBagConstraints.BOTH;
		c.gridx = 0;
		c.gridy = 0;
		
		contentPane.add(new JLabel("      "), c);
		
		c.gridx++;
		
		//Ricerca sentieri
		gridXEClassica = valX;
		inserisci1(valX, 7, Global.getLabels("i77"), iconeGrafiche.newiconSentieri);
		
		from1to3();
		
		//Ricerca abitazioni, caserma, fucina
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i78"), Global.getLabels("i0"), Global.getLabels("i64"), iconeGrafiche.newiconAbitazioni, 
				iconeGrafiche.newiconCaserma, iconeGrafiche.newiconFucina);
		
		if(partita.getGuiPartita().getIndiceProprietario() != 0) //se la civiltà è diversa da romani
		{
			from3to2();
			
			//Ricerca commercio, fanteria
			valX += 4;
			inserisci2(valX, 4, Global.getLabels("i79"), Global.getLabels("i48"), iconeGrafiche.newiconCommercio, iconeGrafiche.newiconFanteria);
			
			from2to3();
		}
		else
		{
			from3to3();
			
			//Ricerca commercio, fanteria, oreficeria
			valX += 4;
			inserisci3(valX, 4, Global.getLabels("i79"),Global.getLabels("i48"), Global.getLabels("i80"), iconeGrafiche.newiconCommercio, 
					iconeGrafiche.newiconFanteria, iconeGrafiche.newiconOreficeria);
			
			from3to3();
		}
		
		//Ricerca religione, ville, tiro con l'arco
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i81"), Global.getLabels("i82"),Global.getLabels("i4"), iconeGrafiche.newiconReligione,
				iconeGrafiche.newiconVille, iconeGrafiche.newiconTiroConArco);
		
		if(partita.getGuiPartita().getIndiceProprietario() != 0) //se la civiltà del giocatore è diversa da romani
		{
			from3to3();
			//Ricerca oracolo,città, cavalleria
			valX += 4;
			inserisci3(valX, 4, Global.getLabels("i25"), Global.getLabels("i83"), Global.getLabels("i6"), iconeGrafiche.newiconOracolo,
					iconeGrafiche.newiconCitta, iconeGrafiche.newiconCavalleria);
			
			from3to1();
			
			if(partita.getGuiPartita().getIndiceProprietario() == 3) //Se utilizziamo i sassoni
			{
				//Ricerca società militare
				valX += 4;
				inserisci1(valX, 7, Global.getLabels("i30"), iconeGrafiche.newiconSocMil);
				
				from1to1();
			}
		}
		else //caso dei romani
		{
			from3to2();
			
			//Ricerca città e cavalleria
			valX += 4;
			inserisci2(valX, 4, Global.getLabels("i83"), Global.getLabels("i6"), iconeGrafiche.newiconCitta, iconeGrafiche.newiconCavalleria);
			
			from2to1();

			//Ricerca età imperiale
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i28"), iconeGrafiche.newiconEtaImp);
			
			from1to1();
		}
		
		//Ricerca strade lastricate
		valX += 4;
		gridXMedioevo = valX;
		inserisci1(valX, 7, Global.getLabels("i84"), iconeGrafiche.newiconLastr);
		
		from1to3();
		
		//Ricerca case a più piani, corazze, balestre
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i85"), Global.getLabels("i8"), Global.getLabels("i10"), iconeGrafiche.newiconCasaPP,
				iconeGrafiche.newiconCorazze, iconeGrafiche.newiconBalestre);
		
		from3to3();
		
		//Ricerca biblioteca, mercenari, clero
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i73"),Global.getLabels("i86"), Global.getLabels("i87"), iconeGrafiche.newiconBiblioteca, 
				iconeGrafiche.newiconMercenari, iconeGrafiche.newiconClero);
		
		from3to3();
		
		//Ricerca Ospedale, case a schiera, tattiche di cavalleria
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i39"), Global.getLabels("i88"), Global.getLabels("i12"), iconeGrafiche.newiconOspedale, 
				iconeGrafiche.newiconCaseASchiera, iconeGrafiche.newiconTatCal);
		
		if(partita.getGuiPartita().getIndiceProprietario() == 0) //se il giocatore ha civiltà romana
		{
			from3to2();
			
			//Ricerca inquisizione, granai
			valX += 4;
			inserisci2(valX, 4, Global.getLabels("i89"), Global.getLabels("i90"), iconeGrafiche.newiconInquisizione, iconeGrafiche.newiconGranai);
			
			from2to2();
			
			//Ricerca fermentazione, polvere da sparo
			valX += 4;
			inserisci2(valX, 4, Global.getLabels("i91"), Global.getLabels("i14"), iconeGrafiche.newiconFermentazione,
					iconeGrafiche.newiconPolvereDaSparo);
			
			from2to1();
		}
		else
		{
			from3to1();
			
			//Ricerca granai
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i90"), iconeGrafiche.newiconGranai);
			
			from1to3();
			
			//Ricerca fermentazione, banca, polvere da sparo
			valX += 4;
			inserisci3(valX, 4, Global.getLabels("i91"), Global.getLabels("i70"),Global.getLabels("i14"), iconeGrafiche.newiconFermentazione, 
					iconeGrafiche.newiconBanca, iconeGrafiche.newiconPolvereDaSparo);
			
			from3to1();
		}
		
		//Ricerca strade asfaltate
		valX += 4;
		gridXEVittoriana = valX;
		inserisci1(valX, 7, Global.getLabels("i92"), iconeGrafiche.newiconStrAsf);
		
		from1to2();
		
		//Ricerca sistema industriale, scienza
		valX += 4;
		inserisci2(valX, 4, Global.getLabels("i93"), Global.getLabels("i94"), iconeGrafiche.newiconSisInd, iconeGrafiche.newiconScienza);
		
		from2to3();
		
		//Ricerca case con mansarda, fucili, gerarchia militare
		valX += 4;
		inserisci3(valX, 4,Global.getLabels("i95"), Global.getLabels("i16"), Global.getLabels("i96"), iconeGrafiche.newiconCasaMan,
				iconeGrafiche.newiconFucili, iconeGrafiche.newiconGerMil);
		
		from3to3();
		
		//Ricerca Società borghese, politica, tattiche in campo aperto
		valX += 4;
		inserisci3(valX, 4, Global.getLabels("i98"), Global.getLabels("i99"), Global.getLabels("i20"), iconeGrafiche.newiconSocBor,
				iconeGrafiche.newiconPolitica, iconeGrafiche.newiconTatCap);
		
		from3to3();
		
		if(partita.getGuiPartita().getIndiceProprietario() == 0 ||
				partita.getGuiPartita().getIndiceProprietario() == 3) //se civiltà è romana o sassone
		{
			//Ricerca musica lirica, villette, balistica
			valX += 4;
			inserisci3(valX, 4, Global.getLabels("i97"), Global.getLabels("i101"), Global.getLabels("i22"), iconeGrafiche.newiconMusLir, 
					iconeGrafiche.newiconVillette, iconeGrafiche.newiconBalistica);
			
			from3to1();
		}
		else
		{
			//Ricerca teatri, villette, balistica
			valX += 4;
			inserisci3(valX, 4, Global.getLabels("i100"), Global.getLabels("i101"), Global.getLabels("i22"), iconeGrafiche.newiconTeatri,
					iconeGrafiche.newiconVillette, iconeGrafiche.newiconBalistica);
			
			from3to1();
		}
		
		switch(partita.getGuiPartita().getIndiceProprietario())
		{
		case 0: //romani
			//Ricerca Carabinieri
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i43"), iconeGrafiche.newiconCarabinieri);
			break;
		case 1: //britanni
			//Ricerca guardie reali britanniche
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i44"), iconeGrafiche.newiconGuaRea);
			break;
		case 2: //galli
			//Ricerca galli
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i46"), iconeGrafiche.newiconLegione);
			break;
		case 3: //sassoni
			//Ricerca gardenkorps
			valX += 4;
			inserisci1(valX, 7, Global.getLabels("i47"), iconeGrafiche.newiconGK);
			break;
		}
		
		c.gridx++;
		contentPane.add(new JLabel("      "), c);
		
		dipingiBackground(gridXEClassica, gridXMedioevo, gridXEVittoriana);
!!!149762.java!!!	dipingiBackground(in gridXEClassica : int, in gridXMedioevo : int, in gridXEVittoriana : int) : void
		c.gridy = 1;
		c.gridx = gridXEClassica;
		JLabel lblECla = new JLabel(Global.getLabels("s114"));
		lblECla.setFont(fontFuturist.deriveFont(13f));
		contentPane.add(lblECla, c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
		
		c.gridy -= 2;
		c.gridx = gridXMedioevo;
		JLabel lblMed = new JLabel(Global.getLabels("s115"));
		lblMed.setFont(fontFuturist.deriveFont(13f));
		contentPane.add(lblMed, c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
		
		c.gridy -= 2;
		c.gridx = gridXEVittoriana;
		JLabel lblEVit = new JLabel(Global.getLabels("s116"));
		lblEVit.setFont(fontFuturist.deriveFont(13f));
		contentPane.add(lblEVit, c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
		c.gridy++;
		contentPane.add(new JLabel("  "), c);
!!!149890.java!!!	from1to1() : void
		c.gridx++;
		c.gridy--;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
!!!150018.java!!!	from1to2() : void
		c.gridx++;
		c.gridy--;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl3su = new JLabel();
		lbl3su.setIcon(iconeGrafiche.newicon3su);
		contentPane.add(lbl3su, c);
		
		c.gridy--;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy--;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy--;
		JLabel lbl2dxgiu = new JLabel();
		lbl2dxgiu.setIcon(iconeGrafiche.newicon2dxgiu);
		contentPane.add(lbl2dxgiu, c);
!!!150146.java!!!	from1to3() : void
	
		c.gridx++;
		c.gridy--;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl4 = new JLabel();
		lbl4.setIcon(iconeGrafiche.newicon4);
		contentPane.add(lbl4, c);
		
		c.gridy--;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy--;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy--;
		JLabel lbl2dxgiu = new JLabel();
		lbl2dxgiu.setIcon(iconeGrafiche.newicon2dxgiu);
		contentPane.add(lbl2dxgiu, c);
		
		c.gridy += 4;
		JLabel lblVert3 = new JLabel();
		lblVert3.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert3, c);
		
		c.gridy++;
		JLabel lblVert4 = new JLabel();
		lblVert4.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert4, c);
		
		c.gridy++;
		JLabel lbl2sudx = new JLabel();
		lbl2sudx.setIcon(iconeGrafiche.newicon2sudx);
		contentPane.add(lbl2sudx, c);
!!!150274.java!!!	from2to1() : void
		c.gridy -= 4;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl2giusx = new JLabel();
		lbl2giusx.setIcon(iconeGrafiche.newicon2giusx);
		contentPane.add(lbl2giusx, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl3su = new JLabel();
		lbl3su.setIcon(iconeGrafiche.newicon3su);
		contentPane.add(lbl3su, c);
!!!150402.java!!!	from2to2() : void
		c.gridy -= 4;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl3giu = new JLabel();
		lbl3giu.setIcon(iconeGrafiche.newicon3giu);
		contentPane.add(lbl3giu, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl3su = new JLabel();
		lbl3su.setIcon(iconeGrafiche.newicon3su);
		contentPane.add(lbl3su, c);
!!!150530.java!!!	from3to1() : void
		c.gridy -= 7;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl2giusx = new JLabel();
		lbl2giusx.setIcon(iconeGrafiche.newicon2giusx);
		contentPane.add(lbl2giusx, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl4 = new JLabel();
		lbl4.setIcon(iconeGrafiche.newicon4);
		contentPane.add(lbl4, c);
		
		c.gridy++;
		JLabel lblVert3 = new JLabel();
		lblVert3.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert3, c);
		
		c.gridy++;
		JLabel lblVert4 = new JLabel();
		lblVert4.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert4, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz3 = new JLabel();
		lblOriz3.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz3, c);
		
		c.gridx++;
		JLabel lbl2sxsu = new JLabel();
		lbl2sxsu.setIcon(iconeGrafiche.newicon2sxsu);
		contentPane.add(lbl2sxsu, c);
!!!150658.java!!!	from3to2() : void
		c.gridy -= 7;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl3giu = new JLabel();
		lbl3giu.setIcon(iconeGrafiche.newicon3giu);
		contentPane.add(lbl3giu, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl3su = new JLabel();
		lbl3su.setIcon(iconeGrafiche.newicon3su);
		contentPane.add(lbl3su, c);
!!!150786.java!!!	from2to3() : void
		c.gridy -= 4;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl3giu = new JLabel();
		lbl3giu.setIcon(iconeGrafiche.newicon3giu);
		contentPane.add(lbl3giu, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl4 = new JLabel();
		lbl4.setIcon(iconeGrafiche.newicon4);
		contentPane.add(lbl4, c);
		
		c.gridy++;
		JLabel lblVert3 = new JLabel();
		lblVert3.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert3, c);
		
		c.gridy++;
		JLabel lblVert4 = new JLabel();
		lblVert4.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert4, c);
		
		c.gridy++;
		JLabel lbl2sudx = new JLabel();
		lbl2sudx.setIcon(iconeGrafiche.newicon2sudx);
		contentPane.add(lbl2sudx, c);
!!!150914.java!!!	from3to3() : void
		c.gridy -= 7;
		c.gridx++;
		JLabel lblOriz = new JLabel();
		lblOriz.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz, c);
		
		c.gridx++;
		JLabel lbl3giu = new JLabel();
		lbl3giu.setIcon(iconeGrafiche.newicon3giu);
		contentPane.add(lbl3giu, c);
		
		c.gridy++;
		JLabel lblVert = new JLabel();
		lblVert.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert, c);
		
		c.gridy++;
		JLabel lblVert2 = new JLabel();
		lblVert2.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert2, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz2 = new JLabel();
		lblOriz2.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz2, c);
		
		c.gridx++;
		JLabel lbl4 = new JLabel();
		lbl4.setIcon(iconeGrafiche.newicon4);
		contentPane.add(lbl4, c);
		
		c.gridy++;
		JLabel lblVert3 = new JLabel();
		lblVert3.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert3, c);
		
		c.gridy++;
		JLabel lblVert4 = new JLabel();
		lblVert4.setIcon(iconeGrafiche.newiconVert);
		contentPane.add(lblVert4, c);
		
		c.gridy++;
		c.gridx--;
		JLabel lblOriz3 = new JLabel();
		lblOriz3.setIcon(iconeGrafiche.newiconOriz);
		contentPane.add(lblOriz3, c);
		
		c.gridx++;
		JLabel lbl3su = new JLabel();
		lbl3su.setIcon(iconeGrafiche.newicon3su);
		contentPane.add(lbl3su, c);
!!!151042.java!!!	inserisci2(in posx : int, in posy : int, in nome1 : String, in nome2 : String, inout icona1 : ImageIcon, inout icona2 : ImageIcon) : void
		
		inserisci1(posx, posy, nome1, icona1);
		inserisci1(posx, posy+3, nome2, icona2);
!!!151170.java!!!	inserisci3(in posx : int, in posy : int, in nome1 : String, in nome2 : String, in nome3 : String, inout icona1 : ImageIcon, inout icona2 : ImageIcon, inout icona3 : ImageIcon) : void
		inserisci1(posx, posy, nome1, icona1);
		inserisci1(posx, posy+3, nome2, icona2);
		inserisci1(posx, posy+6, nome3, icona3);
!!!151298.java!!!	inserisci4(in posx : int, in posy : int, in nome1 : String, in nome2 : String, in nome3 : String, in nome4 : String, inout icona1 : ImageIcon, inout icona2 : ImageIcon, inout icona3 : ImageIcon, inout icona4 : ImageIcon) : void
		inserisci1(posx, posy, nome1, icona1);
		inserisci1(posx, posy+3, nome2, icona2);
		inserisci1(posx, posy+6, nome3, icona3);
		inserisci1(posx, posy+9, nome4, icona4);
!!!151426.java!!!	inserisci1(in posx : int, in posy : int, in nome : String, inout icona : ImageIcon) : void

		//Aggiungo il nome della ricerca
		c.gridx = posx;
		c.gridy = posy;
		
		JLabel lblNome = new JLabel("  " + nome + "  ");
		lblNome.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		contentPane.add(lblNome, c);
		
		JLabel lblcpyTick = new JLabel();  //creata una copia della lblTick per poter utilizzare l'icona tick più volte
		lblcpyTick.setIcon(lblTick.getIcon());
		lblcpyTick.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		JLabel lblcpyCross = new JLabel(); //creata una copia della lblCross per poter utilizzare l'icona cross più volte
		lblcpyCross.setIcon(lblCross.getIcon());
		lblcpyCross.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		
		//Aggiungo l'icona della ricerca
		c.gridx++;
		JLabel lblIcon = new JLabel();
		lblIcon.setIcon(icona);
		lblIcon.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		lblIcon.addMouseListener(new MouseAdapter() {
			@Override
			public void mouseReleased(MouseEvent arg0) {
				if(!partita.getGiocatore().get(partita.getTurnoCorrente()).getProprietario().equals(proprietario)) {
					/*controllo che il turno non sia di un altro giocatore, se è di un altro giocatore non è permesso
					 * ricercare nulla e mostro un avviso che lo comunica.
					 */
					JOptionPane.showMessageDialog(null,Global.getLabels("e15"),Global.getLabels("e7"), JOptionPane.DEFAULT_OPTION);
				}
				else
				{
					if(partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getRicercheEffettuate().contains(nome)) //se già ricercata
					{
						JOptionPane.showMessageDialog(null, Global.getLabels("e16"),
								Global.getLabels("e7"),JOptionPane.DEFAULT_OPTION);
					}
					else
					{
						if(!isRicercaRicercabile(nome))
						{
							JOptionPane.showMessageDialog(null, Global.getLabels("e17"),
									Global.getLabels("e7"), JOptionPane.DEFAULT_OPTION);
						}
						else
						{
							if(partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getPuntiRicerca() < 
									valoriDiGioco.getValoriRicerche().get(nome)) //se i PR del giocatore sono insufficienti
							{
								JOptionPane.showMessageDialog(null,Global.getLabels("e18"),
										Global.getLabels("e7"), JOptionPane.DEFAULT_OPTION);
							}
							else
							{
								int scelta =0;
								Integer rimanente = partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getPuntiRicerca() - 
										valoriDiGioco.getValoriRicerche().get(nome);
								scelta = JOptionPane.showConfirmDialog(
										    null, Global.getLabels("s117")+nome+" "+Global.getLabels("s118")+valoriDiGioco.getValoriRicerche().get(nome).toString()+" "+
										    Global.getLabels("s119")+rimanente.toString()+" "+Global.getLabels("s120"), Global.getLabels("a6"),
										    JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
								if(scelta == 0) //se si
								{
									try {
										audio = AudioSystem.getClip();
										audio.open(AudioSystem.getAudioInputStream(new File("media/ricercaeffettuata.wav")));
									} catch (LineUnavailableException | IOException | UnsupportedAudioFileException e1) {
										e1.printStackTrace();
									}
									FloatControl gainControl = (FloatControl) audio.getControl(FloatControl.Type.MASTER_GAIN);
									gainControl.setValue(Global.getLivVolume()); 
									audio.start();
									partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).setPuntiRicerca(rimanente);
									partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getRicercheEffettuate().add(nome);
									contentPane.remove(lblcpyCross);
									c.gridx = posx+1;
									c.gridy = posy+1;
									contentPane.add(lblcpyTick, c);
									guiPartita.aggiornaDatiGUI();
									contentPane.setVisible(false); //fa una sorta di refresh
									contentPane.setVisible(true);
								}
							}
						}
					}
				}
			}
		});
		contentPane.add(lblIcon, c);
		
		//Aggiungo il costo in punti ricerca
		c.gridx = posx;
		c.gridy++;
		JLabel lblCosto = new JLabel("  " + Integer.toString(valoriDiGioco.getValoriRicerche().get(nome)) + "  ");
		lblCosto.setIcon(iconeGrafiche.newiconCosto);
		lblCosto.setBorder(BorderFactory.createLineBorder(Color.BLACK));
		contentPane.add(lblCosto, c);
		
		
		//Aggiungo lo stato corrente della ricerca (tick o cross)
		c.gridx++;
		
		if(partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getRicercheEffettuate().contains(nome)) 
		{
			contentPane.add(lblcpyTick, c);
		}
		else
		{
			contentPane.add(lblcpyCross, c);
		}
!!!151554.java!!!	isRicercaRicercabile(in nome : String) : boolean
		List<String> ric = new ArrayList<String>();
		ric = partita.getGiocatore().get(partita.getGuiPartita().getIndiceProprietario()).getRicercheEffettuate();
		int civ = partita.getGuiPartita().getIndiceProprietario();
		
		if(nome.equals(Global.getLabels("i78")) || nome.equals(Global.getLabels("i0")) || nome.equals(Global.getLabels("i64"))) {
			if(!ric.contains(Global.getLabels("i77")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i79")) || nome.equals(Global.getLabels("i48")) || nome.equals(Global.getLabels("i80"))) {
			if(!ric.contains(Global.getLabels("i78")) || !ric.contains(Global.getLabels("i0")) || !ric.contains(Global.getLabels("i64")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i81")) || nome.equals(Global.getLabels("i82")) || nome.equals(Global.getLabels("i4"))) {
			if(!ric.contains(Global.getLabels("i79")) || !ric.contains(Global.getLabels("i48")))
				return false; 
			if(civ == 0 && !ric.contains(Global.getLabels("i80")))
				return false;}
		else
		if(nome.equals(Global.getLabels("i25")) || nome.equals(Global.getLabels("i83")) || nome.equals(Global.getLabels("i6"))) {
			if(!ric.contains(Global.getLabels("i81")) || !ric.contains(Global.getLabels("i82")) || !ric.contains(Global.getLabels("i4")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i84"))) {
			if(!ric.contains(Global.getLabels("i83")) || !ric.contains(Global.getLabels("i6")))
				return false;
			if(civ != 0 && !ric.contains(Global.getLabels("i25")))
				return false; 
			if(civ == 0 && !ric.contains(Global.getLabels("i28")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i85")) || nome.equals(Global.getLabels("i8")) || nome.equals(Global.getLabels("i10"))) {
			if(!ric.contains(Global.getLabels("i84")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i73")) || nome.equals(Global.getLabels("i86")) || nome.equals(Global.getLabels("i87"))) {
			if(!ric.contains(Global.getLabels("i85")) || !ric.contains(Global.getLabels("i8")) || !ric.contains(Global.getLabels("i10")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i39")) || nome.equals(Global.getLabels("i88")) || nome.equals(Global.getLabels("i12"))) {
			if(!ric.contains(Global.getLabels("i73")) || !ric.contains(Global.getLabels("i86")) || !ric.contains(Global.getLabels("i87")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i90")) || nome.equals(Global.getLabels("i89"))) {
			if(!ric.contains(Global.getLabels("i39")) || !ric.contains(Global.getLabels("i88")) || !ric.contains(Global.getLabels("i12")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i91")) || nome.equals(Global.getLabels("i70")) || nome.equals(Global.getLabels("i14"))) {
			if(!ric.contains(Global.getLabels("i90")))
				return false; 
			if(civ == 0 && !ric.contains(Global.getLabels("i89")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i92"))) {
			if(!ric.contains(Global.getLabels("i91")) || !ric.contains(Global.getLabels("i14")))
				return false; 
			if(civ != 0 && !ric.contains(Global.getLabels("i70")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i93")) || nome.equals(Global.getLabels("i94"))) {
			if(!ric.contains(Global.getLabels("i92")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i95")) || nome.equals(Global.getLabels("i16")) || nome.equals(Global.getLabels("i96"))) {
			if(!ric.contains(Global.getLabels("i93")) || !ric.contains(Global.getLabels("i94")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i98")) || nome.equals(Global.getLabels("i99")) || nome.equals(Global.getLabels("i20"))) {
			if(!ric.contains(Global.getLabels("i95")) || !ric.contains(Global.getLabels("i16")) || !ric.contains(Global.getLabels("i96")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i100")) || nome.equals(Global.getLabels("i101")) || nome.equals(Global.getLabels("i22")) || nome.equals(Global.getLabels("i97"))) {
			if(!ric.contains(Global.getLabels("i98")) || !ric.contains(Global.getLabels("i99")) || !ric.contains(Global.getLabels("i20")))
				return false;
		}
		else
		if(nome.equals(Global.getLabels("i43"))) {
			if(!ric.contains(Global.getLabels("i97")) || !ric.contains(Global.getLabels("i101")) || !ric.contains(Global.getLabels("i22")))
				return false;
		}
		if(nome.equals(Global.getLabels("i44"))) {
			if(!ric.contains(Global.getLabels("i100")) || !ric.contains(Global.getLabels("i101")) || !ric.contains(Global.getLabels("i22")))
				return false; }
		else
		if(nome.equals(Global.getLabels("i46"))) {
				if(!ric.contains(Global.getLabels("i100")) || !ric.contains(Global.getLabels("i101")) || !ric.contains(Global.getLabels("i22")))
					return false; }
		else
		if(nome.equals(Global.getLabels("i47"))) {
			if(!ric.contains(Global.getLabels("i97")) || !ric.contains(Global.getLabels("i101")) || !ric.contains(Global.getLabels("i22")))
				return false; }
		return true;
